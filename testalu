#!/bin/sh
##
# This script tests the arithmetic logic unit (ALU)
# word-oriented arithmetic and logic operations

# directory of this script
dir="$(dirname $0)"

# include word definitions
source "$dir/worddefs"

# include unit test functions
source "$dir/unittest"

##
# calls 'word' command on same path as this script
word() { echo $($dir/word $*); }

##
# calls 'alu' command on same path as this script
alu() { echo $($dir/alu $*); }

##
# test basic word functions
test_word() {
    # test conversion from hex to word
    local w1=$(word "0xF0A6")
    local w2=$w1
    assertWordEqual "$w1" "1111000010100110"

    # check that initial bits are set
    assertEqual $(word $w1 0) 0
    assertEqual $(word $w1 7) 1
    assertEqual $(word $w1 8) 0
    assertEqual $(word $w1 $wordtopbit) 1
    
    # reverse those bits    
    w1=$(word $w1 0 1)
    w1=$(word $w1 7 0)
    w1=$(word $w1 8 1)
    w1=$(word $w1 $wordtopbit 0)

    # check that modified bits are set
    assertEqual $(word $w1 0) 1
    assertEqual $(word $w1 7) 0
    assertEqual $(word $w1 8) 1
    assertEqual $(word $w1 $wordtopbit) 0

	  # check that initial and modified words different. 
    assertNotEqual $w1 $w2
}

## 
# test math functions (add, sub, mul, div, negative)
test_math() {
    local w1="1111111111111111" # -1
    local w2="0000000000000001" #  1
    local w3="0000000000000000"
    local w4="1111111111111110"
    local w5="1111111111111111"
    local w6="0000000000000100"
    local w7="1111111111111101"
    local w8="0000000000000010"
    local w9="0000000000000010"
    local w10="0000000000000000"
    local w11="1111111111111110"
    local w12="0000000000000000"
    local w13="0000000000000001"
    local w14="1111111111111111"
    local w15="1000000000000000"
    local w16="0000000000000000"

    # test top bit of word
    assertTrue "$(word $w1 $wordtopbit)"

    # test summary of w1 and w2
    echo "alu add test..."
    assertWordEqual "$(alu add $w1 $w2)" $w3 
    assertWordEqual "$(alu add $w4 $w5)" $w7

    # test difference of w1 and w2
    echo "alu sub test..."
    assertWordEqual "$(alu sub $w1 $w2)" $w4 
    assertWordEqual "$(alu sub $w4 $w1)" $w5     

    # test multiplying of w1 and w2
    echo "alu mul test..."
    assertWordEqual "$(alu mul $w4 $w4)" $w6

    # test dividend of w1 and w2
    echo "alu div test..."
    assertWordEqual "$(alu div $w6 $w8)" $w9
    assertWordEqual "$(alu rmdr $w6 $w8)" $w10

    #assertWordEqual "$(alu div $w6 $w4)" $w11
    #assertWordEqual "$(alu rmdr $w6 $w4)" $w12

    #assertWordEqual "$(alu div $w7 $w4)" $w13
    #assertWordEqual "$(alu rmdr $w7 $w4)" $w14

    #assertWordEqual "$(alu div $w7 $zeroword)" $w15
    #assertWordEqual "$(alu rmdr $w7 $zeroword)" $w16

    # test negative of w1 and w2
    echo "alu minus test..."
    assertWordEqual "$(alu minus $w1)" $w2 #  1
    assertWordEqual "$(alu minus $w2)" $w1 # -1
    assertWordEqual "$(alu minus $w4)" $w8 #  2
}

##
# test compare functions (lt, eq, ge)
test_compare() {
	local w0="1111111111111110" # -2
	local w1="1111111111111111" # -1
	local w2="0000000000000000" # 0
	local w3="0000000000000001" # 1
	local w4="0000000000000010" # 2

	# test LT
  assertTrue "$(alu testlt $minword)" # smallest word 

  assertTrue "$(alu testlt $w0)" # -2

  assertTrue "$(alu testlt $w1)" # -1

  assertFalse "$(alu testlt $w2)" # 0

  assertFalse "$(alu testlt $w3)"  # 1

  assertFalse "$(alu testlt $w4)"  # 2  
  
  assertFalse "$(alu testlt $maxword)"  # largest word  

	# test EQ
  assertFalse "$(alu testeq $minword)" # smallest word 

  assertFalse "$(alu testeq $w0)" # -2

  assertFalse "$(alu testeq $w1)" # -1

  assertTrue "$(alu testeq $w2)" # 0

  assertFalse "$(alu testeq $w3)"  # 1

  assertFalse "$(alu testeq $w4)"  # 2  
  
  assertFalse "$(alu testeq $maxword)"  # largest word 

	# test GE
  assertFalse "$(alu testge $minword)" # smallest word 

  assertFalse "$(alu testge $w0)" # -2

  assertFalse "$(alu testge $w1)" # -1

  assertTrue "$(alu testge $w2)" # 0

  assertTrue "$(alu testge $w3)"  # 1

  assertTrue "$(alu testge $w4)"  # 2  
  
  assertTrue "$(alu testge $maxword)"  # largest word 
}

##
# test shift functions (ash, csh, lsh)
test_shift() {
	local w0="0000000000000000"  
	local w1="0000000011111111"  
	local w2="0000000011111111"  
	local w3="1111111100000000"  
	local w4="1111111100000000"  
	local w5="0000000000000000"  
	local w6="1111111100000000"  
	local w7="1000000000000000"  
	local w8="0111111100000000"  
	local w9="0111111100000000"  
	local w10="1111111111111111" 
	local w11="1111111111111111" 
	local w12="0000000011111111" 
	local w13="1111111111110000" 

	# test ash
	assertWordEqual "$(alu ash $w0 0)" $w0 # no rotate

  assertWordEqual "$(alu ash $w1 $(( $wordsize / 2 )))" $w8 # preserve 0 sign bit

  assertWordEqual "$(alu ash $w2 $(( $wordsize / 2 )))" $w9 # preserve 0 sign bit

  assertWordEqual "$(alu ash $w8 $(( $wordsize / 2 )))" $w0 # preserve 0 sign bit

  assertWordEqual "$(alu ash $w1 $(( -$wordsize / 2 )))" $w0 # preserve 0 sign bit

  assertWordEqual "$(alu ash $w2 $(( -$wordsize / 2 )))" $w5 # preserve 0 sign bit

  assertWordEqual "$(alu ash $w3 $(( $wordsize / 2 )))" $w7 # preserve 0 sign bit

  assertWordEqual "$(alu ash $w10 $wordsize)" $w7 # preserve 1 sign bit

  assertWordEqual "$(alu ash $w3 $(( $wordsize / 2 )))" $w7 # preserve 1 sign bit

  assertWordEqual "$(alu ash $w3 $(( -$wordsize / 2 )))" $w10 # preserve 1 sign bit

  assertWordEqual "$(alu ash $w4 $(( -$wordsize / 2 )))" $w11 # preserve 1 sign bit

  assertWordEqual "$(alu ash $w4 $(( -$wordsize / 2 )))" $w11 # preserve 1 sign bit

  assertWordEqual "$(alu ash $w7 $(( -$wordsize )))" $w10 # preserve 1 sign bit

	# test csh
	assertWordEqual "$(alu csh $w0 0)" $w0

	assertWordEqual "$(alu csh $w1 $(( $wordsize / 2 )))" $w3

  assertWordEqual "$(alu csh $w1 $(( $wordsize / 2 )))" $w3

  assertWordEqual "$(alu csh $w1 $wordsize)" $w1

  assertWordEqual "$(alu csh $w1 $(( -$wordsize )))" $w1

  assertWordEqual "$(alu csh $w2 0)" $w2

  assertWordEqual "$(alu csh $w2 $(( $wordsize / 2 )))" $w6

  assertWordEqual "$(alu csh $w2 $(( $wordsize / 2 )))" $w6

  assertWordEqual "$(alu csh $w2 $wordsize)" $w2

  assertWordEqual "$(alu csh $w2 $wordsize)" $w2

	# test lsh
  assertWordEqual "$(alu lsh $w0 0)" $w0

  assertWordEqual "$(alu lsh $w0 $(( $wordsize / 2 )))" $w0

  assertWordEqual "$(alu lsh $w0 $(( -$wordsize / 2 )))" $w0

  assertWordEqual "$(alu lsh $w1 0)" $w1

  assertWordEqual "$(alu lsh $w1 $(( $wordsize / 2 )))" $w3

  assertWordEqual "$(alu lsh $w1 $(( -$wordsize / 2 )))" $w0

  assertWordEqual "$(alu lsh $w2 0)" $w2

  assertWordEqual "$(alu lsh $w2 $(( $wordsize / 2 )))" $w4

  assertWordEqual "$(alu lsh $w1 $(( -$wordsize / 2 )))" $w5
}

##
# test logical functions (and, or, not, xor, mask)
test_logical() {
	local w0="0000000000000000"  
	local w1="0000000011111111"  
	local w2="0000000011111111"  
	local w3="1111111100000000"  
	local w4="1111111100000000"  
	local w5="0000000000000000"  
	local w6="1111111100000000"  
	local w7="1000000000000000"  
	local w8="0111111100000000"  
	local w9="0111111100000000"  
	local w10="1111111111111111" 
	local w11="1111111111111111" 
	local w12="0000000011111111" 
	local w13="1111111111110000" 

	# test or
	assertWordEqual "$(alu or $w0 $w1)" $w1

  assertWordEqual "$(alu or $w1 $w3)" $w10

  assertWordEqual "$(alu or $w1 $w11)" $w10

  assertWordEqual "$(alu or $w7 $w8)" $w3

	# test and
  assertWordEqual "$(alu and $w0 $w1)" $w0

  assertWordEqual "$(alu and $w1 $w3)" $w0

  assertWordEqual "$(alu and $w1 $w11)" $w12

  assertWordEqual "$(alu and $w10 $w10)" $w10

	# test xor
  assertWordEqual "$(alu xor $w6 $w2)" $w10

  assertWordEqual "$(alu xor $w10 $w11)" $w5

  assertWordEqual "$(alu xor $w7 $w9)" $w4

  assertWordEqual "$(alu xor $w10 $w10)" $w0

	# test not
  assertWordEqual "$(alu not $w1)" $w3

  assertWordEqual "$(alu not $w0)" $w10

  assertWordEqual "$(alu not $w5)" $w11

  assertWordEqual "$(alu not $w2)" $w6

	# test mask
  assertWordEqual "$(alu mask $w10 $(( $wordsize / 2 )))" $w3	

  assertWordEqual "$(alu mask $w10 $wordsize)" $w0	

  assertWordEqual "$(alu mask $w10 $(( $wordsize / 4 )))" $w13

  assertWordEqual "$(alu mask $w10 0)" $w10

  assertWordEqual "$(alu mask $w10 $(( -$wordsize / 2 )))" $w1

  assertWordEqual "$(alu mask $w10 $(( -$wordsize )))" $w10	

  assertWordEqual "$(alu mask $w10 $(( -$wordsize / 2 )))" $w1
}

test_word
test_math
test_compare
test_shift
test_logical

# show unit test summary
unitTestSummary
